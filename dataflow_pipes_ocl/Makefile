aws_platform = xilinx_aws-vu9p-f1_1ddr-xpr-2pr_4_0
setup_dir = $(abspath .)/../setup

include $(setup_dir)/Makefile.include

ifneq ($(MAKECMDGOALS),sim)
target = hw
else
export LD_LIBRARY_PATH:=$(LD_LIBRARY_PATH):$(XILINX_SDX)/lib/lnx64.o
export XCL_EMULATION_MODE=$(target)
endif

bucket_name ?= fbit
bucket_dir ?= ocl

out_dir = $(abspath .)/out
src_dir = $(abspath .)/src

# kernel version can be lite or full
kernel_name = adder
kernel_dir = $(src_dir)
kernel_cl = $(kernel_dir)/$(kernel_name).cl
kernel_xclbin = $(out_dir)/$(kernel_name).$(target).xclbin
kernel_xo = $(out_dir)/$(kernel_name).$(target).xo

host_name = host
host_cpp = $(src_dir)/$(host_name).cpp
host_bin = $(out_dir)/$(host_name).$(kernel_name)

# this file is generated by cat test_lib with the test
default: $(host_bin) $(kernel_xclbin)

sim: $(host_bin) $(kernel_xclbin)
	cd $(out_dir) && emconfigutil --platform $(AWS_FPGA_REPO_DIR)/SDAccel/aws_platform/$(aws_platform)/$(aws_platform).xpfm --nd 1
	cd $(out_dir) && $^

host_build: $(host_bin)

$(host_bin): $(host_cpp) | $(AWS_FPGA_REPO_DIR) $(out_dir)
	xcpp -Wall -O0 -g \
	-I $(XILINX_SDX)/runtime/include/1_2 \
	-I $(XILINX_SDX)/Vivado_HLS/include \
	-I $(AWS_FPGA_REPO_DIR)/SDAccel/examples/xilinx/libs/xcl \
	-I $(AWS_FPGA_REPO_DIR)/SDAccel/examples/xilinx/libs/oclHelper \
	-lOpenCL -pthread \
	-L $(XILINX_SDX)/runtime/lib/x86_64 \
	-L $(XILINX_SDX)/lib/lnx64.o \
	-o $@ \
	$(AWS_FPGA_REPO_DIR)/SDAccel/examples/xilinx/libs/xcl/xcl.c \
	$(AWS_FPGA_REPO_DIR)/SDAccel/examples/xilinx/libs/oclHelper/oclHelper.cpp \
	$(AWS_FPGA_REPO_DIR)/SDAccel/examples/xilinx/libs/oclHelper/oclErrorCodes.cpp \
	$<

# get afi-id from text file
afi_id = $(shell cat $(shell ls -t *_afi_id.txt | head -n 1) | sed -nr "s/.*(afi-[0-9a-zA-Z]*).*/\1/p")

afi_status:
	aws ec2 describe-fpga-images --fpga-image-ids $(afi_id)

afi_delete:
	aws ec2 --region us-west-2 delete-fpga-image --fpga-image-id $(afi_id)

afi_build: $(kernel_xclbin) | $(AWS_FPGA_REPO_DIR)
	$(AWS_FPGA_REPO_DIR)/SDAccel/tools/create_sdaccel_afi.sh \
	-xclbin=$< \
	-o=$(out_dir)/$(kernel_name) \
	-s3_bucket=$(bucket_name) \
	-s3_dcp_key=$(bucket_dir) \
	-s3_logs_key=$(bucket_dir)/afi.log

# xocc compile options
# -c compile mode
# -xp additional parameters
# -s save intermediate files
# -k kernel to be compiled (required for c/c++ kernel and optional for opencl ones)
# -t compile target sw_emu, hw_wmu, or hw
# -l link mode

$(kernel_xclbin): $(kernel_xo)
	xocc -l -s \
	--platform $(AWS_FPGA_REPO_DIR)/SDAccel/aws_platform/$(aws_platform)/$(aws_platform).xpfm \
	-t $(target) \
	-o $@ \
	--xp vivado_param:project.runs.noReportGeneration=0 \
	--xp param:compiler.preserveHlsOutput=1 \
	--xp param:compiler.generateExtraRunData=true \
	$<

$(kernel_xo): $(kernel_cl) | $(AWS_FPGA_REPO_DIR) $(out_dir)
	xocc -c -s \
	--platform $(AWS_FPGA_REPO_DIR)/SDAccel/aws_platform/$(aws_platform)/$(aws_platform).xpfm \
	-t $(target) \
	-o $@ \
	--xp vivado_param:project.runs.noReportGeneration=0 \
	--xp param:compiler.preserveHlsOutput=1 \
	--xp param:compiler.generateExtraRunData=true \
	$<

$(out_dir):
	mkdir -p $@

# clone aws-fpga repository
$(AWS_FPGA_REPO_DIR):
	make -C $(setup_dir)

clean_all: clean_out clean_xocc clean_afi

clean: clean_out clean_xocc

clean_out:
	-rm -rf $(out_dir)

clean_xocc:
	-rm -rf *.dir

clean_afi:
	-rm -rf *.txt *.tar *.bit *.bin *.xml to_aws
